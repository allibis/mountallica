#!/bin/bash

#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
#                    Version 2, December 2004
#
# Copyright (C) 2004 Sam Hocevar <sam@hocevar.net>
#
# Everyone is permitted to copy and distribute verbatim or modified
# copies of this license document, and changing it is allowed as long
# as the name is changed.
#
#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
#
#  0. You just DO WHAT THE FUCK YOU WANT TO.

clear
loadkeys it
echo CIAO,VUOI INSTALLARE ARCH?
read ans

if [[ $ans == y ]] || [[ $ans == yes ]] || [[ $ans == '' ]]; then
	echo hai partizionato?
	read ans
	while [ $ans == n ] || [ $ans == no ] 
       	do
		sudo fdisk -l  
		echo scegli il device 
		read dev
		if ! sudo cfdisk $dev ; then
			sudo cfdisk /dev/$dev
		fi
		clear
		sudo fdisk -l
		echo vanno bene le partizioni?
		read ans
	done
	clear
	ctrl=1
	while [ ctrl == 1 ]
	do
		fdisk -l
		echo scegli la partizione di root
		read root
		echo sicuro?
		read ans 
		if [[ $ans == y ]] || [[ $ans == yes ]] || [[ $ans == '' ]]; then
			ctrl=0
		fi
	done
	if ! mkfs.ext4 /dev/$root >&/dev/null; then mkfs.ext4 $root; fi
	if ! mount /dev/$root /mnt >&/dev/null; then mount $root /mnt; fi
	clear
	fdisk -l
	echo
	echo
	echo vuoi installare /home in una partizione separata?
	read ans
	if [[ $ans == y ]] || [[ $ans == yes ]] || [[ $ans == '' ]]; then
		echo scegli partizione 
		read home
		echo vuoi formattarla?
		read ans
		if [[ $ans == y ]] || [[ $ans == yes ]] || [[ $ans == '' ]]; then
			if ! mkfs.ext4 /dev/$home >&/dev/null; then
				mkfs.ext4 $home
				mkdir /mnt/home
				mount $home /mnt/home
			else
				mkdir /mnt/home
				mount /dev/$home /mnt/home
			fi
		else
			mkdir /mnt/home
			if ! mount /dev/$home /mnt/home; then mount $home /mnt/home; fi
		fi
	fi
	clear
	fdisk -l
	echo
	echo
	echo vuoi montare /boot in una partizione separata?
	read ans
	if [[ $ans == 'y' ]] || [[ $ans == 'yes' ]] || [[ $ans == '' ]]; then
		bootpart=true
		mkdir /mnt/boot
		echo scegli la partizione
		read boot
		if ! mkfs.vfat -F32 /dev/$boot >&/dev/null; then
			mkfs.vfat -F32 $boot 
		       	mount $boot /mnt/boot
		else
			mount /dev/$boot /mnt/boot
		fi
	fi
	clear
	fdisk -l
	echo
	echo
	echo hai creato una partizione swap?
	read ans
	if [[ $ans == 'y' ]] || [[ $ans == 'yes' ]] || [[ $ans == '' ]]; then 
		echo scegli la partizione
		read swap
		if ! mkswap /dev/$swap; then
			mkswap $swap
			swapon $swap
		else
			swapon /dev/$swap
		fi
	fi
	clear
	pacman -S reflector >&/dev/null
	cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.old
	reflector > /etc/pacman.d/mirrorlist
	if [[ $ans == 'y' ]] || [[ $ans == 'yes' ]] || [[ $ans == '' ]]; then nano /etc/pacman.d/mirrorlist; fi
	clear
	echo che connessione hai? wifi o ethernet? se sei in una macchina virtuale premi solamente invio
	read connection
	if [[ $connection == wifi ]]; then 
		wifi-menu
		typeinterface=wifi
	elif [[ $connection == ethernet ]]; then
		ctrl=0
		while [ $ctrl == 0 ]
		do
			ifconfig -a
			echo "scegli un' interfaccia valida"
			read interface
			ifconfig $interface up
			if ping 8.8.8.8 >&/dev/null; then
				typeinterface=eth
			fi
		done
	fi
	clear
	pacstrap /mnt base base-devel net-tools netctl dialog iw wpa_supplicant grub wget dhcp dhcpcd wireless_tools
	clear
	genfstab -U /mnt > /mnt/etc/fstab
	sed s/none/swap/g /mnt/etc/fstab
	clear
	wget https://raw.githubusercontent.com/allibis/mountallica/master/aurdown/aurdown.sh >&/dev/null && cp aurdown.sh /mnt/bin/aurdown >&/dev/null
	arch-chroot /mnt chmod +rwx /bin/aurdown
	echo "export boot=$boot" >> /mnt/next.sh
	echo '
	pacman -Scc --noconfirm >&/dev/null
	echo bene, inserisci una password per il root
	ctrl=0
	while [ $ctrl == 0 ]
	do
		if ! passwd; then 
			echo "riprova"
		else
			ctrl=1
		fi
	done
	clear
	if [ -d /sys/efi/efivars ]; then
		pacman -S efibootmgr
		grub-install --target=x86_64-efi --recheck --debug --force /dev/$boot
	else
		grub-install --target=i386-pc --recheck --debug /dev/$boot
		ctrl=1
	fi
	grub-mkconfig -o /boot/grub/grub.cfg
	clear
	echo come vuoi chiamare il sistema?
	read hostname
	echo $hostname > /etc/hostname
	clear
	echo it_IT.UTF-8 UTF-8 >> /etc/locale.gen
	locale-gen
	echo LANG=it_IT.UTF-8 > /etc/locale.conf
	echo KEYMAP=it > /etc/vconsole.conf
	ln -sf /usr/share/zoneinfo/Europe/Rome /etc/localtime
	echo "127.0.1.1        $hostname.localdomain        $hostname" >> /etc/hosts
	clear
	if [[ $typeinterface == wifi ]] ; then 
		wifi-menu
	else 
		systemctl enable dhcpcd.service >&/dev/null
	fi
	clear
	pacman -Sy xorg-server xorg-xinit
	clear
	echo che driver video hai? INTEL, AMD O NVIDIA o virtualbox?
	ctrl=0
	while [ $ctrl == 0 ] 
	do
		read driver
		case $driver in 
		amd | AMD)
			pacman -S  xf86-video-ati xf86-video-amdgpu && ctrl=1
			;;
		intel | INTEL)
			pacman -S xf86-video-intel && ctrl=1
			;;
		nvidia | NVIDIA) 
			pacman -S xf86-video-nouveau && ctrl=1
			;;
		virtualbox) 
			pacman -S virtualbox-guest-utils && ctrl=1
			;;
		*)
			echo inserisci un driver valido
		esac
	done
	pacman -S mesa >&/dev/null
	echo hai un touchpad?
	read ans
	if [[ $ans == y ]] || [[ $ans == yes ]] || [[ $ans == "" ]]; then
		pacman -S xf86-input-synaptics
	fi
	pacman -Scc --noconfirm >&/dev/null
	clear
	echo inserisci il nome utente 
	read name
	useradd -m $name
	ctrl=0
	while [ $ctrl == 0 ]
	do
		if ! passwd $name; then 
			echo "riprova"
		else
			ctrl=1
		fi
	done
	echo "vuoi installare grub-customizer?"
	read ans
	if [[ $ans == y ]] || [[ $ans == yes ]] || [[ $ans == "" ]]; then
		aurdown grub-customizer
	fi
	clear
		echo che shell vuoi usare?
	ctrl=0
	while [ $ctrl == 0 ]
	do
		echo "scegli una shell dalla lista
		1=zsh
		2=fish
		3=dash
		4=korn
		*=tenere bash
		"
		read shell
		case $shell in
		1)
			aurdown zsh
			echo vuoi installare oh my zsh?
			read ans
			if [[ $ans == y ]] || [[ $ans == yes ]] || [[ $ans == "" ]]; then
				sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"
			fi 
			ctrl=1 ;;
		2)	
			aurdown fish 
			ctrl=1 ;;
		3)
			aurdown dash 
			ctrl=1 ;;
		4)
			aurdown mksh 
			ctrl=1 ;; 
		*)
			echo sei sicuro di tenere bash?
			read ans
			if [[ $ans == y ]] || [[ $ans == yes ]] || [[ $ans == "" ]] ; then
				ctrl=1
			else
				echo allora inserisci una shell
			fi
			;;
		esac
	done
	clear
	echo vuoi cambiare la shell all utente $name ?
	read ans
	if [[ $ans == y ]] || [[ $ans == yes ]] || [[ $ans == "" ]] ; then
		chsh -s /bin/$shell $name
	fi
	clear
	echo che editor cli preferisci?
	ctrl=0
	while [ $ctrl == 0 ]
	do 
		read editor
		if pacman -S $editor; then
			echo export EDITOR=$editor >> ~/.bashrc
			ctrl=1
		else
			echo inserisci un editor valido
		fi
	done
	clear
	pacman -Scc --noconfirm >&/dev/null
	echo bene, adesso bisogna modificare il file /etc/sudoers per utilizzare sudo
	echo decommenta la riga "ALL=(ALL) ALL" per usare sudo
	echo
	echo premi invio per modificare il file
	read
	${editor} /etc/sudoers
	clear
	echo "inserisci il numero corrispondente al DE per installarlo
	1=xfce
	2=gnome
	3=kde
	4=mate
	5=deepin
	6=budgie
	7=enlightenment
	8=cinnamon
	9=lxde
	10=lxqt
	"
	ctrl=0
	while [ $ctrl == 0 ]
	do
		read de
		case $de in 
		1)
	    		pacman -S xfce4 
			echo vuoi installare xfce4-goodies?
			read ans
			if [[ $ans == y ]] || [[ $ans == yes ]] || [[ $ans == "" ]] ; then
				pacman -S xfce4-goodies
			fi
			ctrl=1 ;;
		2)
	    		pacman -S gnome 
			echo vuoi installare gnome-extra?
			read ans
			if [[ $ans == y ]] || [[ $ans == yes ]] || [[ $ans == "" ]]; then
				pacman -S gnome-extra
			fi
			ctrl=1 ;;
		3)
	    		pacman -S plasma
			echo vuoi installare kde-application?
			read ans
			if [[ $ans == y ]] || [[ $ans == yes ]] || [[ $ans == "" ]]; then
				pacman -S kde-application
			fi
			ctrl=1 ;;
		4)
	    		pacman -S mate && ctrl=1 ;;
		5)
	   		pacman -S deepin 
			echo  vuoi installare deepin-extra?
			read ans
			if [[ $ans == y ]] || [[ $ans == yes ]] || [[ $ans == "" ]]; then
				pacman -S deepin-extra
			fi
			ctrl=1 ;;
		6)
	    		pacman -S budgie-desktop gnome && ctrl=1 ;;
		7)
	    		pacman -S enlightenment
			echo vuoi installare terminology?
			read ans
			if [[ $ans == y ]] || [[ $ans == yes ]] || [[ $ans == "" ]]; then
				pacman -S terminology
			fi
			ctrl=1 ;;
		8)
			pacman -S cinnamon && ctrl=1 ;;
		9)
			pacman -S lxde lxde-gtk3 lxsession desktop-file-utils 
			cp /etc/xdg/openbox/menu.xml /etc/xdg/openbox/rc.xml /etc/xdg/openbox/autostart ~/.config/openbox 
			ctrl=1 ;;
		10)
    			pacman -S lxqt vuoi installare lxqt-connman-applet?
			read ans
			if [[ $ans == y ]] || [[ $ans == yes ]] || [[ $ans == "" ]]; then
				aurdown lxqt-connman-applet-git
			fi
			ctrl=1 ;;
		*)
			echo inserisci un de nella lista
		esac
	done
	pacman -Scc --noconfirm >&/dev/null
	clear
	echo "scegli un DM e scrivi il numero corrispondente
	1=lightdm
	2=sddm
	3=gdm
	4=lxdm
	5=slim
	"
	ctrl=0
	while [ $ctrl == 0 ] 
	do
		read dm
		case $dm in
		1)
			if pacman -S lightdm; then
				systemctl enable lightdm 
				ctrl=1 
			fi ;;
		2)
			if pacman -S sddm; then
				echo vuoi installare sddm-config-editor?
				read ans
				if [[ $ans == 'y' ]] || [[ $ans == 'yes' ]] || [[ $ans == '' ]]; then
					aurdown sddm-config-editor-git
				fi
				systemctl enable sddm 
				ctrl=1 
			fi ;;
		3)
			if pacman -S gdm; then
				systemctl enable gdm 
				ctrl=1 
			fi ;;
		4)
			if pacman -S lxdm; then
				systemctl enable lxdm 
				ctrl=1 
			fi ;;
		5)
			if pacman -S slim; then
				systemctl enable slim
				ctrl=1
			fi ;;
		*)
			echo inserisci un numero da 1 a 6 ;;
		esac
	done
	clear
	pacman -Scc --noconfirm >&/dev/null
	systemctl enable dhcpcd
	systemctl enable dhcpd4
	systemctl enable dhcpd6
	echo che network manager desideri?
	ctrl=0 
	while [ ctrl == 0 ]
	do
		echo "
		1=NetworkManager
		2=wicd
		3=netctl
		4=manuale
		"
		read net
		case $net in 
		1)
			pacman -S networkmanager network-manager-applet
			if [[ $de != 2 ]]; then 
				pacman -S polkit-gnome gnome-keyring libgnome-keyring python2-xdg
			fi
			pacman -R netctl
			systemctl enable NetworkManager
			ctrl=1
			;;
		2)
			if [[ $de != 2 ]]; then
				pacman -S xfce4-notifyd
			fi
			pacman -S wicd wicd-gtk
			pacman -R netctl
			gpasswd -a $name users
			systemctl enble wicd
			ctrl=1
			;;
		3)
			pacman -S netctl
			ctrl=1
			;;
		4)
			echo hai scelto il manager manuale
			ctrl=1
		*)
			clear
			echo inserisci un numero da 1 a 4
		esac
	done
	clear
	echo vuoi installare altro?
	read ans
	if [[ $ans == y ]] || [[ $ans == yes ]] || [[ $ans == "" ]]; then
		ctrl=0
		echo scrivi un pacchetto alla volta, quando hai finito inserisci "end"
		while [ $ctrl == 0 ]
		do
			read pkg
			if [[ $pkg == end ]]; then
				ctrl=1
			else
				aurdown $pkg
				echo inserisci un altro pacchetto oppure inserisci end
			fi
		done
	fi
	clear' >> /mnt/next.sh
	arch-chroot /mnt chmod +rx /next.sh
	arch-chroot /mnt sh /next.sh
	echo "Bene! L'installazione è finita. Vuoi spegnere il pc?"
	read ans
	if [[ $ans == 'y' ]] || [[ $ans == 'yes' ]] || [[ $ans == '' ]]; then
		poweroff
	fi
else
	echo 'okay :('
fi
exit
